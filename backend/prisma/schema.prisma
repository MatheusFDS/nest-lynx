// Conteúdo para: prisma.schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  isActive  Boolean   @default(true)
  email     String    @unique
  password  String
  name      String
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    String
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId  String?
  settings  UserSettings?
  driver    Driver?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  approvals Approval[] // Relação com aprovações feitas pelo usuário
}

model Role {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  isPlatformRole Boolean @default(false)
  users         User[]
}

model Tenant {
  id                   String   @id @default(uuid())
  isActive             Boolean  @default(true)
  name                 String   @unique
  minDeliveryPercentage Float?    // % máxima de frete sobre valor para liberação automática
  address              String?
  minValue             Float?    // Valor mínimo de mercadoria para liberação automática
  minOrders            Int?    // Número mínimo de pedidos para liberação automática
  minPeso              Float?    // Peso mínimo total para liberação automática
  users                User[]
  drivers              Driver[]
  vehicles             Vehicle[]
  orders               Order[]
  directions           Directions[]
  deliveries           Delivery[]
  categories           Category[]
  accountsPayable      AccountsPayable[]
  paymentDeliveries    PaymentDelivery[]
  deliveryProofs       DeliveryProof[]
  payments             Payment[]
  approvals            Approval[] // Relação com aprovações no contexto deste tenant
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserSettings {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id              String   @id @default(uuid())
  name            String
  license         String
  cpf             String
  tenantId        String
  userId          String?  @unique
  Tenant          Tenant   @relation(fields: [tenantId], references: [id])
  User            User?    @relation(fields: [userId], references: [id])
  vehicles        Vehicle[]
  deliveries      Delivery[]
  orders          Order[]
  accountsPayable AccountsPayable[]
  deliveryProofs  DeliveryProof[]
  payments        Payment[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([cpf, tenantId])
}

model Vehicle {
  id         String   @id @default(uuid())
  model      String
  plate      String
  driverId   String
  tenantId   String
  categoryId String
  Driver     Driver   @relation(fields: [driverId], references: [id])
  Tenant     Tenant   @relation(fields: [tenantId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
  deliveries Delivery[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([plate, tenantId])
}

model Order {
  id                 String   @id @default(uuid())
  numero             String
  data               DateTime
  idCliente          String
  cliente            String
  endereco           String
  cidade             String
  uf                 String
  peso               Float
  volume             Int      // Geralmente Int, se for Float, ajustar
  prazo              String?
  prioridade         String
  telefone           String
  email              String
  bairro             String
  valor              Float
  instrucoesEntrega  String?
  nomeContato        String
  cpfCnpj            String
  cep                String
  status             String   // Ex: "Sem rota", "Em rota, aguardando liberação", "Em rota", "Em entrega", "Entregue", "Não entregue"
  motivoNaoEntrega   String?
  codigoMotivoNaoEntrega String?
  deliveryId         String?
  tenantId           String
  driverId           String?  // Motorista que efetivamente interagiu (iniciou/completou)
  Tenant             Tenant   @relation(fields: [tenantId], references: [id])
  Delivery           Delivery? @relation(fields: [deliveryId], references: [id], onDelete: SetNull)
  Driver             Driver?  @relation(fields: [driverId], references: [id])
  sorting            Int?
  startedAt          DateTime? // Data/hora de início da tentativa de entrega do pedido
  completedAt        DateTime? // Data/hora de conclusão (Entregue ou Não Entregue) do pedido
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deliveryProofs     DeliveryProof[]

  @@index([deliveryId])
  @@index([tenantId])
  @@index([status])
  @@unique([numero, tenantId])
}

model Directions {
  id             String   @id @default(uuid())
  rangeInicio    String
  rangeFim       String
  valorDirecao   Int
  regiao         String
  tenantId       String
  Tenant         Tenant   @relation(fields: [tenantId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Delivery {
  id            String    @id @default(uuid())
  motoristaId   String
  veiculoId     String
  valorFrete    Float
  totalPeso     Float
  totalValor    Float
  dataInicio    DateTime  @default(now()) // Data de criação do roteiro
  dataFim       DateTime? // Data de finalização do roteiro
  status        String    // Ex: "A liberar", "Iniciado", "Finalizado", "Rejeitado"
  tenantId      String
  dataLiberacao DateTime? // Data da última liberação/aprovação
  observacao    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Tenant        Tenant    @relation(fields: [tenantId], references: [id])
  orders        Order[]
  Driver        Driver    @relation(fields: [motoristaId], references: [id])
  Vehicle       Vehicle   @relation(fields: [veiculoId], references: [id])
  paymentDeliveries PaymentDelivery[] @relation("DeliveryToPaymentDeliveries")
  approvals     Approval[] // Histórico de aprovações/rejeições para este roteiro
}

// Modelo para Aprovações/Liberações de Roteiros
model Approval {
  id         String   @id @default(uuid())
  deliveryId String
  tenantId   String
  action     String   // Ex: "APPROVED", "REJECTED" (usar ApprovalAction enum)
  motivo     String?  // Motivo, especialmente para rejeições
  userId     String   // Usuário que realizou a ação
  createdAt  DateTime @default(now())
  Delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade) // Se o roteiro for deletado, as aprovações dele também
  Tenant     Tenant   @relation(fields: [tenantId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@index([deliveryId])
  @@index([userId])
}

model Category {
  id       String    @id @default(uuid())
  name     String
  valor    Float
  tenantId String
  Tenant   Tenant    @relation(fields: [tenantId], references: [id])
  vehicles Vehicle[]
}

model AccountsPayable {
  id               String    @id @default(uuid())
  amount           Float
  status           String
  tenantId         String
  motoristaId      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  groupedPaymentId String?
  isGroup          Boolean   @default(false)
  Tenant           Tenant    @relation(fields: [tenantId], references: [id])
  Driver           Driver    @relation(fields: [motoristaId], references: [id])
  paymentDeliveries PaymentDelivery[] @relation("PaymentToPaymentDeliveries")
}

model PaymentDelivery {
  paymentId       String
  deliveryId      String
  tenantId        String
  Tenant          Tenant          @relation(fields: [tenantId], references: [id])
  accountsPayable AccountsPayable @relation(fields: [paymentId], references: [id], onDelete: Cascade, name: "PaymentToPaymentDeliveries")
  delivery        Delivery        @relation(fields: [deliveryId], references: [id], onDelete: Cascade, name: "DeliveryToPaymentDeliveries")

  @@id([paymentId, deliveryId])
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  driverId  String
  Driver    Driver   @relation(fields: [driverId], references: [id])
  tenantId  String
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryProof {
  id        String   @id @default(uuid())
  orderId   String
  Order     Order    @relation(fields: [orderId], references: [id])
  driverId  String
  Driver    Driver   @relation(fields: [driverId], references: [id])
  tenantId  String
  Tenant    Tenant   @relation(fields: [tenantId], references: [id])
  proofUrl  String
  createdAt DateTime @default(now())
}