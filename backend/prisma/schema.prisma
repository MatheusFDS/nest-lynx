datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Tenant {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  users     User[]
  drivers   Driver[]
  vehicles  Vehicle[]
  orders    Order[]
  directions Directions[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Driver {
  id        Int       @id @default(autoincrement())
  name      String
  license   String
  cpf       String
  tenantId  Int
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  vehicles  Vehicle[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([cpf, tenantId]) // Garantir que o CPF é único por tenant
}

model Vehicle {
  id        Int       @id @default(autoincrement())
  model     String
  plate     String
  driverId  Int
  tenantId  Int
  Driver    Driver    @relation(fields: [driverId], references: [id])
  Tenant    Tenant    @relation(fields: [tenantId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@unique([plate, tenantId]) // Garantir que a placa é única por tenant
}

model Order {
  id                Int      @id @default(autoincrement())
  numero            String
  data              DateTime
  idCliente         String
  cliente           String
  endereco          String
  cidade            String
  uf                String
  peso              Float
  volume            Int
  prazo             String?
  prioridade        String
  telefone          String
  email             String
  bairro            String
  valor             Float
  instrucoesEntrega String?
  nomeContato       String
  cpfCnpj           String
  cep               String
  status            String
  roteiroId         Int?
  tenantId          Int
  Tenant            Tenant   @relation(fields: [tenantId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Directions {
  id            Int      @id @default(autoincrement())
  rangeInicio   String
  rangeFim      String
  valorDirecao  String
  regiao        String
  tenantId      Int
  Tenant        Tenant   @relation(fields: [tenantId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}
